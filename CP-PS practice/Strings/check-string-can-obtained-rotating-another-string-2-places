/*
Given two strings, the task is to find if a string can be obtained by rotating another string by two places. 

Examples: 

Input: string1 = “amazon”, string2 = “azonam” 
Output: Yes 
Explanation: Rotating string1 by 2 places in anti-clockwise gives the string2.

Input: string1 = “amazon”, string2 = “onamaz” 
Output: Yes 
Explanation: Rotating string1 by 2 places in clockwise gives the string2.
*/

/*
We could check directly if the string is rotated or not by comparing the two strings. 

Illustration:

Steps –

Check if the string is rotated in clockwise manner.
Check if the string is rotated in anticlockwise manner. 
Return true if any one of the above is true
We compare for clockwise and anticlockwise by using for loops and the modulo operator-

Note that – 

For clockwise – str1[i] == str2[(i + 2) % n]

For anticlockwise – str1[(i + 2) % n] == str2[i]

Here n is length of string 

Check using the above two conditions and the problem will be solved!
*/

using System;

public class GFG{
	public static bool IsRotated(string str1, string str2)
	{
		int n = str1.Length;
		bool clockwise = true, anticlockwise = true;

		// clockwise direction check
		for (int i = 0; i < n; i++)
		{
			if (str1[i] != str2[(i + 2) % n])
			{
				clockwise = false; // not rotated clockwise
				break;
			}
		}

		// anticlockwise direction check
		for (int i = 0; i < n; i++)
		{
			if (str1[(i + 2) % n] != str2[i])
			{
				anticlockwise = false; // not rotated anticlockwise
				break;
			}
		}

		return clockwise || anticlockwise; // if any of both is true, return true
	}

	public static void Main()
	{
		string str1 = "geeks";
		string str2 = "eksge";

		Console.WriteLine(IsRotated(str1, str2) ? "Yes" : "No");
	}
}
